

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Wed Mar 16 19:22:58 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	text7,local,class=CODE,merge=1,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	functab,global,class=ENTRY,delta=2
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.40
    27                           ; Generated 17/11/2021 GMT
    28                           ; 
    29                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F887 Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  008F                     	;# 
   106  0090                     	;# 
   107  0091                     	;# 
   108  0092                     	;# 
   109  0093                     	;# 
   110  0093                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0098                     	;# 
   117  0099                     	;# 
   118  009A                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  0105                     	;# 
   125  0107                     	;# 
   126  0108                     	;# 
   127  0109                     	;# 
   128  010C                     	;# 
   129  010C                     	;# 
   130  010D                     	;# 
   131  010E                     	;# 
   132  010F                     	;# 
   133  0185                     	;# 
   134  0187                     	;# 
   135  0188                     	;# 
   136  0189                     	;# 
   137  018C                     	;# 
   138  018D                     	;# 
   139  0000                     	;# 
   140  0001                     	;# 
   141  0002                     	;# 
   142  0003                     	;# 
   143  0004                     	;# 
   144  0005                     	;# 
   145  0006                     	;# 
   146  0007                     	;# 
   147  0008                     	;# 
   148  0009                     	;# 
   149  000A                     	;# 
   150  000B                     	;# 
   151  000C                     	;# 
   152  000D                     	;# 
   153  000E                     	;# 
   154  000E                     	;# 
   155  000F                     	;# 
   156  0010                     	;# 
   157  0011                     	;# 
   158  0012                     	;# 
   159  0013                     	;# 
   160  0014                     	;# 
   161  0015                     	;# 
   162  0015                     	;# 
   163  0016                     	;# 
   164  0017                     	;# 
   165  0018                     	;# 
   166  0019                     	;# 
   167  001A                     	;# 
   168  001B                     	;# 
   169  001B                     	;# 
   170  001C                     	;# 
   171  001D                     	;# 
   172  001E                     	;# 
   173  001F                     	;# 
   174  0081                     	;# 
   175  0085                     	;# 
   176  0086                     	;# 
   177  0087                     	;# 
   178  0088                     	;# 
   179  0089                     	;# 
   180  008C                     	;# 
   181  008D                     	;# 
   182  008E                     	;# 
   183  008F                     	;# 
   184  0090                     	;# 
   185  0091                     	;# 
   186  0092                     	;# 
   187  0093                     	;# 
   188  0093                     	;# 
   189  0093                     	;# 
   190  0094                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0098                     	;# 
   195  0099                     	;# 
   196  009A                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  009F                     	;# 
   202  0105                     	;# 
   203  0107                     	;# 
   204  0108                     	;# 
   205  0109                     	;# 
   206  010C                     	;# 
   207  010C                     	;# 
   208  010D                     	;# 
   209  010E                     	;# 
   210  010F                     	;# 
   211  0185                     	;# 
   212  0187                     	;# 
   213  0188                     	;# 
   214  0189                     	;# 
   215  018C                     	;# 
   216  018D                     	;# 
   217  0000                     	;# 
   218  0001                     	;# 
   219  0002                     	;# 
   220  0003                     	;# 
   221  0004                     	;# 
   222  0005                     	;# 
   223  0006                     	;# 
   224  0007                     	;# 
   225  0008                     	;# 
   226  0009                     	;# 
   227  000A                     	;# 
   228  000B                     	;# 
   229  000C                     	;# 
   230  000D                     	;# 
   231  000E                     	;# 
   232  000E                     	;# 
   233  000F                     	;# 
   234  0010                     	;# 
   235  0011                     	;# 
   236  0012                     	;# 
   237  0013                     	;# 
   238  0014                     	;# 
   239  0015                     	;# 
   240  0015                     	;# 
   241  0016                     	;# 
   242  0017                     	;# 
   243  0018                     	;# 
   244  0019                     	;# 
   245  001A                     	;# 
   246  001B                     	;# 
   247  001B                     	;# 
   248  001C                     	;# 
   249  001D                     	;# 
   250  001E                     	;# 
   251  001F                     	;# 
   252  0081                     	;# 
   253  0085                     	;# 
   254  0086                     	;# 
   255  0087                     	;# 
   256  0088                     	;# 
   257  0089                     	;# 
   258  008C                     	;# 
   259  008D                     	;# 
   260  008E                     	;# 
   261  008F                     	;# 
   262  0090                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0093                     	;# 
   267  0093                     	;# 
   268  0094                     	;# 
   269  0095                     	;# 
   270  0096                     	;# 
   271  0097                     	;# 
   272  0098                     	;# 
   273  0099                     	;# 
   274  009A                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  009F                     	;# 
   280  0105                     	;# 
   281  0107                     	;# 
   282  0108                     	;# 
   283  0109                     	;# 
   284  010C                     	;# 
   285  010C                     	;# 
   286  010D                     	;# 
   287  010E                     	;# 
   288  010F                     	;# 
   289  0185                     	;# 
   290  0187                     	;# 
   291  0188                     	;# 
   292  0189                     	;# 
   293  018C                     	;# 
   294  018D                     	;# 
   295  0008                     _PORTDbits	set	8
   296  0007                     _PORTC	set	7
   297  0008                     _PORTD	set	8
   298  0006                     _PORTB	set	6
   299  0087                     _TRISC	set	135
   300  0086                     _TRISB	set	134
   301  0088                     _TRISD	set	136
   302                           
   303                           	psect	strings
   304  0015                     __pstrings:
   305  0015                     stringtab:
   306  0015                     __stringtab:
   307                           
   308                           ;	String table - string pointers are 1 byte each
   309  0015  1BFF               	btfsc	btemp+1,7
   310  0016  281F               	ljmp	stringcode
   311  0017  1383               	bcf	3,7
   312  0018  187F               	btfsc	btemp+1,0
   313  0019  1783               	bsf	3,7
   314  001A  0800               	movf	0,w
   315  001B  0A84               	incf	4,f
   316  001C  1903               	skipnz
   317  001D  0AFF               	incf	btemp+1,f
   318  001E  0008               	return
   319  001F                     stringcode:
   320  001F                     stringdir:
   321  001F  3000               	movlw	high stringdir
   322  0020  008A               	movwf	10
   323  0021  0804               	movf	4,w
   324  0022  0A84               	incf	4,f
   325  0023  0782               	addwf	2,f
   326  0024                     __stringbase:
   327  0024  3400               	retlw	0
   328  0025                     __end_of__stringtab:
   329  0025                     STR_1:
   330  0025  344A               	retlw	74	;'J'
   331  0026  344A               	retlw	74	;'J'
   332  0027  3475               	retlw	117	;'u'
   333  0028  346C               	retlw	108	;'l'
   334  0029  3469               	retlw	105	;'i'
   335  002A  3461               	retlw	97	;'a'
   336  002B  346E               	retlw	110	;'n'
   337  002C  3400               	retlw	0
   338                           
   339                           	psect	cinit
   340  07F3                     start_initialization:	
   341                           ; #config settings
   342                           
   343  07F3                     __initialization:
   344                           
   345                           ; Clear objects allocated to BANK0
   346  07F3  1383               	bcf	3,7	;select IRP bank0
   347  07F4  3020               	movlw	low __pbssBANK0
   348  07F5  0084               	movwf	4
   349  07F6  304A               	movlw	low (__pbssBANK0+42)
   350  07F7  120A  118A  2528  120A  118A  	fcall	clear_ram0
   351  07FC                     end_of_initialization:	
   352                           ;End of C runtime variable initialization code
   353                           
   354  07FC                     __end_of__initialization:
   355  07FC  0183               	clrf	3
   356  07FD  120A  118A  2DD8   	ljmp	_main	;jump to C main() function
   357                           
   358                           	psect	bssBANK0
   359  0020                     __pbssBANK0:
   360  0020                     lcdPuts@F1498:
   361  0020                     	ds	16
   362  0030                     lcdPuts@F1496:
   363  0030                     	ds	16
   364  0040                     _temp:
   365  0040                     	ds	2
   366  0042                     _unidades:
   367  0042                     	ds	2
   368  0044                     _decenas:
   369  0044                     	ds	2
   370  0046                     _centenas:
   371  0046                     	ds	2
   372  0048                     _cont:
   373  0048                     	ds	2
   374                           
   375                           	psect	clrtext
   376  0528                     clear_ram0:	
   377                           ;	Called with FSR containing the base address, and
   378                           ;	W with the last address+1
   379                           
   380  0528  0064               	clrwdt	;clear the watchdog before getting into this loop
   381  0529                     clrloop0:
   382  0529  0180               	clrf	0	;clear RAM location pointed to by FSR
   383  052A  0A84               	incf	4,f	;increment pointer
   384  052B  0604               	xorwf	4,w	;XOR with final address
   385  052C  1903               	btfsc	3,2	;have we reached the end yet?
   386  052D  3400               	retlw	0	;all done for this memory range, return
   387  052E  0604               	xorwf	4,w	;XOR again to restore value
   388  052F  2D29               	goto	clrloop0	;do the next byte
   389                           
   390                           	psect	cstackCOMMON
   391  0070                     __pcstackCOMMON:
   392  0070                     ?_ctrlEn:
   393  0070                     ?_ctrlRs:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_ctrlData:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?_delay_ms:	
   400                           ; 1 bytes @ 0x0
   401                           
   402  0070                     ?_lcdConfig:	
   403                           ; 1 bytes @ 0x0
   404                           
   405  0070                     ?_main:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ctrlEn@status:	
   409                           ; 1 bytes @ 0x0
   410                           
   411  0070                     ctrlRs@status:	
   412                           ; 1 bytes @ 0x0
   413                           
   414  0070                     ctrlData@Data:	
   415                           ; 1 bytes @ 0x0
   416                           
   417  0070                     delay_ms@milliseconds:	
   418                           ; 1 bytes @ 0x0
   419                           
   420                           
   421                           ; 4 bytes @ 0x0
   422  0070                     	ds	1
   423  0071                     ??_ctrlEn:
   424  0071                     ??_ctrlRs:	
   425                           ; 1 bytes @ 0x1
   426                           
   427  0071                     ??_ctrlData:	
   428                           ; 1 bytes @ 0x1
   429                           
   430                           
   431                           ; 1 bytes @ 0x1
   432  0071                     	ds	3
   433  0074                     ??_delay_ms:
   434                           
   435                           ; 1 bytes @ 0x4
   436  0074                     	ds	4
   437  0078                     ?_lcdWriteRegister:
   438  0078                     ?_lcdWriteData:	
   439                           ; 1 bytes @ 0x8
   440                           
   441  0078                     lcdWriteRegister@regAddr:	
   442                           ; 1 bytes @ 0x8
   443                           
   444  0078                     lcdWriteData@data:	
   445                           ; 1 bytes @ 0x8
   446                           
   447                           
   448                           ; 1 bytes @ 0x8
   449  0078                     	ds	1
   450  0079                     ??_lcdWriteRegister:
   451  0079                     ??_lcdWriteData:	
   452                           ; 1 bytes @ 0x9
   453                           
   454                           
   455                           ; 1 bytes @ 0x9
   456  0079                     	ds	2
   457  007B                     lcdWriteRegister@obj:
   458  007B                     lcdWriteData@obj:	
   459                           ; 1 bytes @ 0xB
   460                           
   461                           
   462                           ; 1 bytes @ 0xB
   463  007B                     	ds	1
   464  007C                     ??_lcdConfig:
   465  007C                     ?_lcdSetPosition:	
   466                           ; 1 bytes @ 0xC
   467                           
   468  007C                     lcdSetPosition@position:	
   469                           ; 1 bytes @ 0xC
   470                           
   471                           
   472                           ; 1 bytes @ 0xC
   473  007C                     	ds	1
   474  007D                     ??_lcdSetPosition:
   475  007D                     lcdConfig@obj:	
   476                           ; 1 bytes @ 0xD
   477                           
   478                           
   479                           ; 1 bytes @ 0xD
   480  007D                     	ds	1
   481                           
   482                           	psect	cstackBANK0
   483  004A                     __pcstackBANK0:
   484  004A                     lcdSetPosition@obj:
   485                           
   486                           ; 1 bytes @ 0x0
   487  004A                     	ds	1
   488  004B                     ?_lcdInit:
   489  004B                     ?_lcdPutsInLine1:	
   490                           ; 1 bytes @ 0x1
   491                           
   492  004B                     lcdInit@E:	
   493                           ; 1 bytes @ 0x1
   494                           
   495  004B                     lcdPutsInLine1@s:	
   496                           ; 1 bytes @ 0x1
   497                           
   498                           
   499                           ; 2 bytes @ 0x1
   500  004B                     	ds	1
   501  004C                     lcdInit@RS:
   502                           
   503                           ; 1 bytes @ 0x2
   504  004C                     	ds	1
   505  004D                     lcdInit@data:
   506  004D                     lcdPutsInLine1@initPos:	
   507                           ; 1 bytes @ 0x3
   508                           
   509                           
   510                           ; 1 bytes @ 0x3
   511  004D                     	ds	1
   512  004E                     ??_lcdPutsInLine1:
   513  004E                     lcdInit@wait:	
   514                           ; 1 bytes @ 0x4
   515                           
   516                           
   517                           ; 1 bytes @ 0x4
   518  004E                     	ds	1
   519  004F                     ??_lcdInit:
   520                           
   521                           ; 1 bytes @ 0x5
   522  004F                     	ds	1
   523  0050                     lcdInit@obj:
   524                           
   525                           ; 1 bytes @ 0x6
   526  0050                     	ds	2
   527  0052                     lcdPutsInLine1@i:
   528                           
   529                           ; 2 bytes @ 0x8
   530  0052                     	ds	2
   531  0054                     lcdPutsInLine1@obj:
   532                           
   533                           ; 1 bytes @ 0xA
   534  0054                     	ds	1
   535  0055                     ??_main:
   536                           
   537                           ; 1 bytes @ 0xB
   538  0055                     	ds	4
   539  0059                     main@objLcd:
   540                           
   541                           ; 4 bytes @ 0xF
   542  0059                     	ds	4
   543                           
   544                           	psect	maintext
   545  05D8                     __pmaintext:	
   546 ;;
   547 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   548 ;;
   549 ;; *************** function _main *****************
   550 ;; Defined at:
   551 ;;		line 43 in file "newmain.c"
   552 ;; Parameters:    Size  Location     Type
   553 ;;		None
   554 ;; Auto vars:     Size  Location     Type
   555 ;;  objLcd          4   15[BANK0 ] struct .
   556 ;; Return value:  Size  Location     Type
   557 ;;                  1    wreg      void 
   558 ;; Registers used:
   559 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   560 ;; Tracked objects:
   561 ;;		On entry : B00/0
   562 ;;		On exit  : 0/0
   563 ;;		Unchanged: 0/0
   564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   565 ;;      Params:         0       0       0       0       0
   566 ;;      Locals:         0       4       0       0       0
   567 ;;      Temps:          0       4       0       0       0
   568 ;;      Totals:         0       8       0       0       0
   569 ;;Total ram usage:        8 bytes
   570 ;; Hardware stack levels required when called: 4
   571 ;; This function calls:
   572 ;;		_lcdInit
   573 ;;		_lcdPutsInLine1
   574 ;; This function is called by:
   575 ;;		Startup code after reset
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579  05D8                     _main:	
   580                           ;psect for function _main
   581                           
   582  05D8                     l878:	
   583                           ;incstack = 0
   584                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   585                           
   586                           
   587                           ;newmain.c: 44: TRISD=0;
   588  05D8  1683               	bsf	3,5	;RP0=1, select bank1
   589  05D9  1303               	bcf	3,6	;RP1=0, select bank1
   590  05DA  0188               	clrf	8	;volatile
   591                           
   592                           ;newmain.c: 45: TRISB=0;
   593  05DB  0186               	clrf	6	;volatile
   594                           
   595                           ;newmain.c: 46: TRISC=0;
   596  05DC  0187               	clrf	7	;volatile
   597                           
   598                           ;newmain.c: 47: PORTB=0;
   599  05DD  1283               	bcf	3,5	;RP0=0, select bank0
   600  05DE  1303               	bcf	3,6	;RP1=0, select bank0
   601  05DF  0186               	clrf	6	;volatile
   602                           
   603                           ;newmain.c: 48: PORTD=0;
   604  05E0  0188               	clrf	8	;volatile
   605                           
   606                           ;newmain.c: 49: PORTC=0;
   607  05E1  0187               	clrf	7	;volatile
   608  05E2                     l880:
   609                           
   610                           ;newmain.c: 51: lcdData_t objLcd;;newmain.c: 52: lcdInit(&objLcd,ctrlEn, ctrlRs , ctrlDa
      +                          ta, delay_ms );
   611  05E2  3004               	movlw	(low (fp__ctrlEn-fpbase))& (0+255)
   612  05E3  00D5               	movwf	??_main
   613  05E4  0855               	movf	??_main,w
   614  05E5  00CB               	movwf	lcdInit@E
   615  05E6  3007               	movlw	(low (fp__ctrlRs-fpbase))& (0+255)
   616  05E7  00D6               	movwf	??_main+1
   617  05E8  0856               	movf	??_main+1,w
   618  05E9  00CC               	movwf	lcdInit@RS
   619  05EA  3001               	movlw	(low (fp__ctrlData-fpbase))& (0+255)
   620  05EB  00D7               	movwf	??_main+2
   621  05EC  0857               	movf	??_main+2,w
   622  05ED  00CD               	movwf	lcdInit@data
   623  05EE  300A               	movlw	(low (fp__delay_ms-fpbase))& (0+255)
   624  05EF  00D8               	movwf	??_main+3
   625  05F0  0858               	movf	??_main+3,w
   626  05F1  00CE               	movwf	lcdInit@wait
   627  05F2  3059               	movlw	(low (main@objLcd| 0))& (0+255)
   628  05F3  120A  118A  2578  120A  118A  	fcall	_lcdInit
   629  05F8                     l882:
   630                           
   631                           ;newmain.c: 57: lcdPutsInLine1(&objLcd, "JJulian", 0);
   632  05F8  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   633  05F9  1283               	bcf	3,5	;RP0=0, select bank0
   634  05FA  1303               	bcf	3,6	;RP1=0, select bank0
   635  05FB  00CB               	movwf	lcdPutsInLine1@s
   636  05FC  3080               	movlw	128
   637  05FD  00CC               	movwf	lcdPutsInLine1@s+1
   638  05FE  01CD               	clrf	lcdPutsInLine1@initPos
   639  05FF  3059               	movlw	(low (main@objLcd| 0))& (0+255)
   640  0600  120A  118A  2617  120A  118A  	fcall	_lcdPutsInLine1
   641  0605                     l884:
   642                           
   643                           ;newmain.c: 58: _delay((unsigned long)((500)*(4000000/4000.0)));
   644  0605  3003               	movlw	3
   645  0606  1283               	bcf	3,5	;RP0=0, select bank0
   646  0607  1303               	bcf	3,6	;RP1=0, select bank0
   647  0608  00D7               	movwf	??_main+2
   648  0609  308A               	movlw	138
   649  060A  00D6               	movwf	??_main+1
   650  060B  3055               	movlw	85
   651  060C  00D5               	movwf	??_main
   652  060D                     u297:
   653  060D  0BD5               	decfsz	??_main,f
   654  060E  2E0D               	goto	u297
   655  060F  0BD6               	decfsz	??_main+1,f
   656  0610  2E0D               	goto	u297
   657  0611  0BD7               	decfsz	??_main+2,f
   658  0612  2E0D               	goto	u297
   659  0613  2DF8               	goto	l882
   660  0614  120A  118A  2800   	ljmp	start
   661  0617                     __end_of_main:
   662                           
   663                           	psect	text1
   664  0617                     __ptext1:	
   665 ;; *************** function _lcdPutsInLine1 *****************
   666 ;; Defined at:
   667 ;;		line 99 in file "lcd.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;  obj             1    wreg     const PTR const struct .
   670 ;;		 -> main@objLcd(4), 
   671 ;;  s               2    1[BANK0 ] PTR const unsigned char 
   672 ;;		 -> lcdPuts@line1(16), STR_1(8), 
   673 ;;  initPos         1    3[BANK0 ] unsigned char 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  obj             1   10[BANK0 ] const PTR const struct .
   676 ;;		 -> main@objLcd(4), 
   677 ;;  i               2    8[BANK0 ] int 
   678 ;; Return value:  Size  Location     Type
   679 ;;                  1    wreg      void 
   680 ;; Registers used:
   681 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   682 ;; Tracked objects:
   683 ;;		On entry : 0/0
   684 ;;		On exit  : 0/0
   685 ;;		Unchanged: 0/0
   686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   687 ;;      Params:         0       3       0       0       0
   688 ;;      Locals:         0       3       0       0       0
   689 ;;      Temps:          0       4       0       0       0
   690 ;;      Totals:         0      10       0       0       0
   691 ;;Total ram usage:       10 bytes
   692 ;; Hardware stack levels used: 1
   693 ;; Hardware stack levels required when called: 3
   694 ;; This function calls:
   695 ;;		_ctrlRs
   696 ;;		_lcdSetPosition
   697 ;;		_lcdWriteData
   698 ;; This function is called by:
   699 ;;		_main
   700 ;;		_lcdPuts
   701 ;; This function uses a non-reentrant model
   702 ;;
   703                           
   704  0617                     _lcdPutsInLine1:	
   705                           ;psect for function _lcdPutsInLine1
   706                           
   707                           
   708                           ;incstack = 0
   709                           ; Regs used in _lcdPutsInLine1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   710                           ;lcdPutsInLine1@obj stored from wreg
   711  0617  1283               	bcf	3,5	;RP0=0, select bank0
   712  0618  1303               	bcf	3,6	;RP1=0, select bank0
   713  0619  00D4               	movwf	lcdPutsInLine1@obj
   714  061A                     l856:
   715                           
   716                           ;lcd.c: 100: lcdSetPosition(obj, 0 + initPos);
   717  061A  084D               	movf	lcdPutsInLine1@initPos,w
   718  061B  00CE               	movwf	??_lcdPutsInLine1
   719  061C  084E               	movf	??_lcdPutsInLine1,w
   720  061D  00FC               	movwf	lcdSetPosition@position
   721  061E  0854               	movf	lcdPutsInLine1@obj,w
   722  061F  120A  118A  2530  120A  118A  	fcall	_lcdSetPosition
   723  0624                     l858:
   724                           
   725                           ;lcd.c: 101: int i = 0;
   726  0624  1283               	bcf	3,5	;RP0=0, select bank0
   727  0625  1303               	bcf	3,6	;RP1=0, select bank0
   728  0626  01D2               	clrf	lcdPutsInLine1@i
   729  0627  01D3               	clrf	lcdPutsInLine1@i+1
   730                           
   731                           ;lcd.c: 102: while(s[i]){
   732  0628  2E5E               	goto	l866
   733  0629                     l860:
   734                           
   735                           ;lcd.c: 103: obj->ctrlRS(1);
   736  0629  01F0               	clrf	ctrlRs@status
   737  062A  0AF0               	incf	ctrlRs@status,f
   738  062B  0A54               	incf	lcdPutsInLine1@obj,w
   739  062C  0084               	movwf	4
   740  062D  1383               	bcf	3,7	;select IRP bank0
   741  062E  0800               	movf	0,w
   742  062F  120A  118A  2003  120A  118A  	fcall	fptable
   743  0634                     l862:
   744                           
   745                           ;lcd.c: 104: lcdWriteData(obj, s[i++]);
   746  0634  1283               	bcf	3,5	;RP0=0, select bank0
   747  0635  1303               	bcf	3,6	;RP1=0, select bank0
   748  0636  0852               	movf	lcdPutsInLine1@i,w
   749  0637  074B               	addwf	lcdPutsInLine1@s,w
   750  0638  00CF               	movwf	??_lcdPutsInLine1+1
   751  0639  084C               	movf	lcdPutsInLine1@s+1,w
   752  063A  00CE               	movwf	??_lcdPutsInLine1
   753  063B  1803               	skipnc
   754  063C  0ACE               	incf	??_lcdPutsInLine1,f
   755  063D  1FD2               	btfss	lcdPutsInLine1@i,7
   756  063E  2E40               	goto	u190
   757  063F  03CE               	decf	??_lcdPutsInLine1,f
   758  0640                     u190:
   759  0640  1283               	bcf	3,5	;RP0=0, select bank0
   760  0641  1303               	bcf	3,6	;RP1=0, select bank0
   761  0642  084E               	movf	??_lcdPutsInLine1,w
   762  0643  00D0               	movwf	??_lcdPutsInLine1+2
   763  0644  0850               	movf	??_lcdPutsInLine1+2,w
   764  0645  00FF               	movwf	btemp+1
   765  0646  084F               	movf	??_lcdPutsInLine1+1,w
   766  0647  0084               	movwf	4
   767  0648  120A  118A  2015  120A  118A  	fcall	stringtab
   768  064D  00D1               	movwf	??_lcdPutsInLine1+3
   769  064E  0851               	movf	??_lcdPutsInLine1+3,w
   770  064F  00F8               	movwf	lcdWriteData@data
   771  0650  0854               	movf	lcdPutsInLine1@obj,w
   772  0651  120A  118A  267B  120A  118A  	fcall	_lcdWriteData
   773  0656                     l864:
   774  0656  3001               	movlw	1
   775  0657  1283               	bcf	3,5	;RP0=0, select bank0
   776  0658  1303               	bcf	3,6	;RP1=0, select bank0
   777  0659  07D2               	addwf	lcdPutsInLine1@i,f
   778  065A  1803               	skipnc
   779  065B  0AD3               	incf	lcdPutsInLine1@i+1,f
   780  065C  3000               	movlw	0
   781  065D  07D3               	addwf	lcdPutsInLine1@i+1,f
   782  065E                     l866:
   783  065E  0852               	movf	lcdPutsInLine1@i,w
   784  065F  074B               	addwf	lcdPutsInLine1@s,w
   785  0660  00CF               	movwf	??_lcdPutsInLine1+1
   786  0661  084C               	movf	lcdPutsInLine1@s+1,w
   787  0662  00CE               	movwf	??_lcdPutsInLine1
   788  0663  1803               	skipnc
   789  0664  0ACE               	incf	??_lcdPutsInLine1,f
   790  0665  1FD2               	btfss	lcdPutsInLine1@i,7
   791  0666  2E68               	goto	u200
   792  0667  03CE               	decf	??_lcdPutsInLine1,f
   793  0668                     u200:
   794  0668  1283               	bcf	3,5	;RP0=0, select bank0
   795  0669  1303               	bcf	3,6	;RP1=0, select bank0
   796  066A  084E               	movf	??_lcdPutsInLine1,w
   797  066B  00D0               	movwf	??_lcdPutsInLine1+2
   798  066C  0850               	movf	??_lcdPutsInLine1+2,w
   799  066D  00FF               	movwf	btemp+1
   800  066E  084F               	movf	??_lcdPutsInLine1+1,w
   801  066F  0084               	movwf	4
   802  0670  120A  118A  2015  120A  118A  	fcall	stringtab
   803  0675  3A00               	xorlw	0
   804  0676  1D03               	skipz
   805  0677  2E79               	goto	u211
   806  0678  2E7A               	goto	u210
   807  0679                     u211:
   808  0679  2E29               	goto	l860
   809  067A                     u210:
   810  067A                     l106:
   811  067A  0008               	return
   812  067B                     __end_of_lcdPutsInLine1:
   813                           
   814                           	psect	text2
   815  0578                     __ptext2:	
   816 ;; *************** function _lcdInit *****************
   817 ;; Defined at:
   818 ;;		line 12 in file "lcd.c"
   819 ;; Parameters:    Size  Location     Type
   820 ;;  obj             1    wreg     const PTR struct .
   821 ;;		 -> main@objLcd(4), 
   822 ;;  E               1    1[BANK0 ] PTR FTN(unsigned char ,)
   823 ;;		 -> ctrlEn(1), 
   824 ;;  RS              1    2[BANK0 ] PTR FTN(unsigned char ,)
   825 ;;		 -> ctrlRs(1), 
   826 ;;  data            1    3[BANK0 ] PTR FTN(unsigned char ,)
   827 ;;		 -> ctrlData(1), 
   828 ;;  wait            1    4[BANK0 ] PTR FTN(unsigned long ,)
   829 ;;		 -> delay_ms(1), 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  obj             1    6[BANK0 ] const PTR struct .
   832 ;;		 -> main@objLcd(4), 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      void 
   835 ;; Registers used:
   836 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   842 ;;      Params:         0       4       0       0       0
   843 ;;      Locals:         0       1       0       0       0
   844 ;;      Temps:          0       1       0       0       0
   845 ;;      Totals:         0       6       0       0       0
   846 ;;Total ram usage:        6 bytes
   847 ;; Hardware stack levels used: 1
   848 ;; Hardware stack levels required when called: 3
   849 ;; This function calls:
   850 ;;		_lcdConfig
   851 ;;		_lcdSetPosition
   852 ;; This function is called by:
   853 ;;		_main
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857  0578                     _lcdInit:	
   858                           ;psect for function _lcdInit
   859                           
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in _lcdInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   863                           ;lcdInit@obj stored from wreg
   864  0578  1283               	bcf	3,5	;RP0=0, select bank0
   865  0579  1303               	bcf	3,6	;RP1=0, select bank0
   866  057A  00D0               	movwf	lcdInit@obj
   867  057B                     l846:
   868                           
   869                           ;lcd.c: 14: obj->ctrlEnable = E;
   870  057B  084B               	movf	lcdInit@E,w
   871  057C  00CF               	movwf	??_lcdInit
   872  057D  0850               	movf	lcdInit@obj,w
   873  057E  0084               	movwf	4
   874  057F  084F               	movf	??_lcdInit,w
   875  0580  1383               	bcf	3,7	;select IRP bank0
   876  0581  0080               	movwf	0
   877                           
   878                           ;lcd.c: 15: obj->ctrlRS = RS;
   879  0582  084C               	movf	lcdInit@RS,w
   880  0583  00CF               	movwf	??_lcdInit
   881  0584  0A50               	incf	lcdInit@obj,w
   882  0585  0084               	movwf	4
   883  0586  084F               	movf	??_lcdInit,w
   884  0587  0080               	movwf	0
   885  0588                     l848:
   886                           
   887                           ;lcd.c: 16: obj->ctrlData = data;
   888  0588  084D               	movf	lcdInit@data,w
   889  0589  00CF               	movwf	??_lcdInit
   890  058A  0850               	movf	lcdInit@obj,w
   891  058B  3E02               	addlw	2
   892  058C  0084               	movwf	4
   893  058D  084F               	movf	??_lcdInit,w
   894  058E  0080               	movwf	0
   895  058F                     l850:
   896                           
   897                           ;lcd.c: 17: obj->ctrlWait = wait;
   898  058F  084E               	movf	lcdInit@wait,w
   899  0590  00CF               	movwf	??_lcdInit
   900  0591  0850               	movf	lcdInit@obj,w
   901  0592  3E03               	addlw	3
   902  0593  0084               	movwf	4
   903  0594  084F               	movf	??_lcdInit,w
   904  0595  0080               	movwf	0
   905  0596                     l852:
   906                           
   907                           ;lcd.c: 19: lcdConfig(obj);
   908  0596  0850               	movf	lcdInit@obj,w
   909  0597  120A  118A  25A6  120A  118A  	fcall	_lcdConfig
   910  059C                     l854:
   911                           
   912                           ;lcd.c: 20: lcdSetPosition(obj, 0);
   913  059C  01FC               	clrf	lcdSetPosition@position
   914  059D  1283               	bcf	3,5	;RP0=0, select bank0
   915  059E  1303               	bcf	3,6	;RP1=0, select bank0
   916  059F  0850               	movf	lcdInit@obj,w
   917  05A0  120A  118A  2530  120A  118A  	fcall	_lcdSetPosition
   918  05A5                     l88:
   919  05A5  0008               	return
   920  05A6                     __end_of_lcdInit:
   921                           
   922                           	psect	text3
   923  0530                     __ptext3:	
   924 ;; *************** function _lcdSetPosition *****************
   925 ;; Defined at:
   926 ;;		line 68 in file "lcd.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  obj             1    wreg     const PTR const struct .
   929 ;;		 -> main@objLcd(4), 
   930 ;;  position        1   12[COMMON] unsigned char 
   931 ;; Auto vars:     Size  Location     Type
   932 ;;  obj             1    0[BANK0 ] const PTR const struct .
   933 ;;		 -> main@objLcd(4), 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   943 ;;      Params:         1       0       0       0       0
   944 ;;      Locals:         0       1       0       0       0
   945 ;;      Temps:          1       0       0       0       0
   946 ;;      Totals:         2       1       0       0       0
   947 ;;Total ram usage:        3 bytes
   948 ;; Hardware stack levels used: 1
   949 ;; Hardware stack levels required when called: 2
   950 ;; This function calls:
   951 ;;		_ctrlRs
   952 ;;		_lcdWriteData
   953 ;; This function is called by:
   954 ;;		_lcdInit
   955 ;;		_lcdPutsInLine1
   956 ;;		_lcdPutsInLine2
   957 ;; This function uses a non-reentrant model
   958 ;;
   959                           
   960  0530                     _lcdSetPosition:	
   961                           ;psect for function _lcdSetPosition
   962                           
   963                           
   964                           ;incstack = 0
   965                           ; Regs used in _lcdSetPosition: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   966                           ;lcdSetPosition@obj stored from wreg
   967  0530  1283               	bcf	3,5	;RP0=0, select bank0
   968  0531  1303               	bcf	3,6	;RP1=0, select bank0
   969  0532  00CA               	movwf	lcdSetPosition@obj
   970  0533                     l844:
   971                           
   972                           ;lcd.c: 69: obj->ctrlRS(0);
   973  0533  01F0               	clrf	ctrlRs@status
   974  0534  0A4A               	incf	lcdSetPosition@obj,w
   975  0535  0084               	movwf	4
   976  0536  1383               	bcf	3,7	;select IRP bank0
   977  0537  0800               	movf	0,w
   978  0538  120A  118A  2003  120A  118A  	fcall	fptable
   979                           
   980                           ;lcd.c: 70: lcdWriteData(obj, (0x80U) + position);
   981  053D  087C               	movf	lcdSetPosition@position,w
   982  053E  3E80               	addlw	128
   983  053F  00FD               	movwf	??_lcdSetPosition
   984  0540  087D               	movf	??_lcdSetPosition,w
   985  0541  00F8               	movwf	lcdWriteData@data
   986  0542  1283               	bcf	3,5	;RP0=0, select bank0
   987  0543  1303               	bcf	3,6	;RP1=0, select bank0
   988  0544  084A               	movf	lcdSetPosition@obj,w
   989  0545  120A  118A  267B  120A  118A  	fcall	_lcdWriteData
   990  054A                     l97:
   991  054A  0008               	return
   992  054B                     __end_of_lcdSetPosition:
   993                           
   994                           	psect	text4
   995  067B                     __ptext4:	
   996 ;; *************** function _lcdWriteData *****************
   997 ;; Defined at:
   998 ;;		line 72 in file "lcd.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  obj             1    wreg     const PTR const struct .
  1001 ;;		 -> main@objLcd(4), 
  1002 ;;  data            1    8[COMMON] unsigned char 
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  obj             1   11[COMMON] const PTR const struct .
  1005 ;;		 -> main@objLcd(4), 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;                  1    wreg      void 
  1008 ;; Registers used:
  1009 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1015 ;;      Params:         1       0       0       0       0
  1016 ;;      Locals:         1       0       0       0       0
  1017 ;;      Temps:          2       0       0       0       0
  1018 ;;      Totals:         4       0       0       0       0
  1019 ;;Total ram usage:        4 bytes
  1020 ;; Hardware stack levels used: 1
  1021 ;; Hardware stack levels required when called: 1
  1022 ;; This function calls:
  1023 ;;		_ctrlData
  1024 ;;		_ctrlEn
  1025 ;;		_delay_ms
  1026 ;; This function is called by:
  1027 ;;		_lcdSetPosition
  1028 ;;		_lcdPutsInLine1
  1029 ;;		_lcdPutsInLine2
  1030 ;;		_lcdPutch
  1031 ;; This function uses a non-reentrant model
  1032 ;;
  1033                           
  1034  067B                     _lcdWriteData:	
  1035                           ;psect for function _lcdWriteData
  1036                           
  1037                           
  1038                           ;incstack = 0
  1039                           ; Regs used in _lcdWriteData: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1040                           ;lcdWriteData@obj stored from wreg
  1041  067B  00FB               	movwf	lcdWriteData@obj
  1042  067C                     l840:
  1043                           
  1044                           ;lcd.c: 80: obj->ctrlEnable(1);
  1045  067C  01F0               	clrf	ctrlEn@status
  1046  067D  0AF0               	incf	ctrlEn@status,f
  1047  067E  087B               	movf	lcdWriteData@obj,w
  1048  067F  0084               	movwf	4
  1049  0680  1383               	bcf	3,7	;select IRP bank0
  1050  0681  0800               	movf	0,w
  1051  0682  120A  118A  2003  120A  118A  	fcall	fptable
  1052                           
  1053                           ;lcd.c: 81: obj->ctrlData( 0x0F );
  1054  0687  300F               	movlw	15
  1055  0688  00F9               	movwf	??_lcdWriteData
  1056  0689  0879               	movf	??_lcdWriteData,w
  1057  068A  00F0               	movwf	ctrlData@Data
  1058  068B  087B               	movf	lcdWriteData@obj,w
  1059  068C  3E02               	addlw	2
  1060  068D  0084               	movwf	4
  1061  068E  1383               	bcf	3,7	;select IRP bank0
  1062  068F  0800               	movf	0,w
  1063  0690  120A  118A  2003  120A  118A  	fcall	fptable
  1064                           
  1065                           ;lcd.c: 82: obj->ctrlData( data & 0xF0 );
  1066  0695  0878               	movf	lcdWriteData@data,w
  1067  0696  39F0               	andlw	240
  1068  0697  00F9               	movwf	??_lcdWriteData
  1069  0698  0879               	movf	??_lcdWriteData,w
  1070  0699  00F0               	movwf	ctrlData@Data
  1071  069A  087B               	movf	lcdWriteData@obj,w
  1072  069B  3E02               	addlw	2
  1073  069C  0084               	movwf	4
  1074  069D  1383               	bcf	3,7	;select IRP bank0
  1075  069E  0800               	movf	0,w
  1076  069F  120A  118A  2003  120A  118A  	fcall	fptable
  1077                           
  1078                           ;lcd.c: 85: obj->ctrlWait((2));
  1079  06A4  3000               	movlw	0
  1080  06A5  00F3               	movwf	delay_ms@milliseconds+3
  1081  06A6  3000               	movlw	0
  1082  06A7  00F2               	movwf	delay_ms@milliseconds+2
  1083  06A8  3000               	movlw	0
  1084  06A9  00F1               	movwf	delay_ms@milliseconds+1
  1085  06AA  3002               	movlw	2
  1086  06AB  00F0               	movwf	delay_ms@milliseconds
  1087  06AC  087B               	movf	lcdWriteData@obj,w
  1088  06AD  3E03               	addlw	3
  1089  06AE  0084               	movwf	4
  1090  06AF  1383               	bcf	3,7	;select IRP bank0
  1091  06B0  0800               	movf	0,w
  1092  06B1  120A  118A  2003  120A  118A  	fcall	fptable
  1093                           
  1094                           ;lcd.c: 86: obj->ctrlEnable(0);
  1095  06B6  01F0               	clrf	ctrlEn@status
  1096  06B7  087B               	movf	lcdWriteData@obj,w
  1097  06B8  0084               	movwf	4
  1098  06B9  1383               	bcf	3,7	;select IRP bank0
  1099  06BA  0800               	movf	0,w
  1100  06BB  120A  118A  2003  120A  118A  	fcall	fptable
  1101                           
  1102                           ;lcd.c: 87: obj->ctrlWait((2));
  1103  06C0  3000               	movlw	0
  1104  06C1  00F3               	movwf	delay_ms@milliseconds+3
  1105  06C2  3000               	movlw	0
  1106  06C3  00F2               	movwf	delay_ms@milliseconds+2
  1107  06C4  3000               	movlw	0
  1108  06C5  00F1               	movwf	delay_ms@milliseconds+1
  1109  06C6  3002               	movlw	2
  1110  06C7  00F0               	movwf	delay_ms@milliseconds
  1111  06C8  087B               	movf	lcdWriteData@obj,w
  1112  06C9  3E03               	addlw	3
  1113  06CA  0084               	movwf	4
  1114  06CB  1383               	bcf	3,7	;select IRP bank0
  1115  06CC  0800               	movf	0,w
  1116  06CD  120A  118A  2003  120A  118A  	fcall	fptable
  1117                           
  1118                           ;lcd.c: 88: obj->ctrlEnable(1);
  1119  06D2  01F0               	clrf	ctrlEn@status
  1120  06D3  0AF0               	incf	ctrlEn@status,f
  1121  06D4  087B               	movf	lcdWriteData@obj,w
  1122  06D5  0084               	movwf	4
  1123  06D6  1383               	bcf	3,7	;select IRP bank0
  1124  06D7  0800               	movf	0,w
  1125  06D8  120A  118A  2003  120A  118A  	fcall	fptable
  1126                           
  1127                           ;lcd.c: 89: obj->ctrlData( 0x0F );
  1128  06DD  300F               	movlw	15
  1129  06DE  00F9               	movwf	??_lcdWriteData
  1130  06DF  0879               	movf	??_lcdWriteData,w
  1131  06E0  00F0               	movwf	ctrlData@Data
  1132  06E1  087B               	movf	lcdWriteData@obj,w
  1133  06E2  3E02               	addlw	2
  1134  06E3  0084               	movwf	4
  1135  06E4  1383               	bcf	3,7	;select IRP bank0
  1136  06E5  0800               	movf	0,w
  1137  06E6  120A  118A  2003  120A  118A  	fcall	fptable
  1138                           
  1139                           ;lcd.c: 90: obj->ctrlData( (data<<4) & 0xF0 );
  1140  06EB  0878               	movf	lcdWriteData@data,w
  1141  06EC  00F9               	movwf	??_lcdWriteData
  1142  06ED  3003               	movlw	3
  1143  06EE                     u185:
  1144  06EE  1003               	clrc
  1145  06EF  0DF9               	rlf	??_lcdWriteData,f
  1146  06F0  3EFF               	addlw	-1
  1147  06F1  1D03               	skipz
  1148  06F2  2EEE               	goto	u185
  1149  06F3  1003               	clrc
  1150  06F4  0D79               	rlf	??_lcdWriteData,w
  1151  06F5  39F0               	andlw	240
  1152  06F6  00FA               	movwf	??_lcdWriteData+1
  1153  06F7  087A               	movf	??_lcdWriteData+1,w
  1154  06F8  00F0               	movwf	ctrlData@Data
  1155  06F9  087B               	movf	lcdWriteData@obj,w
  1156  06FA  3E02               	addlw	2
  1157  06FB  0084               	movwf	4
  1158  06FC  1383               	bcf	3,7	;select IRP bank0
  1159  06FD  0800               	movf	0,w
  1160  06FE  120A  118A  2003  120A  118A  	fcall	fptable
  1161                           
  1162                           ;lcd.c: 93: obj->ctrlWait((2));
  1163  0703  3000               	movlw	0
  1164  0704  00F3               	movwf	delay_ms@milliseconds+3
  1165  0705  3000               	movlw	0
  1166  0706  00F2               	movwf	delay_ms@milliseconds+2
  1167  0707  3000               	movlw	0
  1168  0708  00F1               	movwf	delay_ms@milliseconds+1
  1169  0709  3002               	movlw	2
  1170  070A  00F0               	movwf	delay_ms@milliseconds
  1171  070B  087B               	movf	lcdWriteData@obj,w
  1172  070C  3E03               	addlw	3
  1173  070D  0084               	movwf	4
  1174  070E  1383               	bcf	3,7	;select IRP bank0
  1175  070F  0800               	movf	0,w
  1176  0710  120A  118A  2003  120A  118A  	fcall	fptable
  1177                           
  1178                           ;lcd.c: 94: obj->ctrlEnable(0);
  1179  0715  01F0               	clrf	ctrlEn@status
  1180  0716  087B               	movf	lcdWriteData@obj,w
  1181  0717  0084               	movwf	4
  1182  0718  1383               	bcf	3,7	;select IRP bank0
  1183  0719  0800               	movf	0,w
  1184  071A  120A  118A  2003  120A  118A  	fcall	fptable
  1185                           
  1186                           ;lcd.c: 95: obj->ctrlWait((2));
  1187  071F  3000               	movlw	0
  1188  0720  00F3               	movwf	delay_ms@milliseconds+3
  1189  0721  3000               	movlw	0
  1190  0722  00F2               	movwf	delay_ms@milliseconds+2
  1191  0723  3000               	movlw	0
  1192  0724  00F1               	movwf	delay_ms@milliseconds+1
  1193  0725  3002               	movlw	2
  1194  0726  00F0               	movwf	delay_ms@milliseconds
  1195  0727  087B               	movf	lcdWriteData@obj,w
  1196  0728  3E03               	addlw	3
  1197  0729  0084               	movwf	4
  1198  072A  1383               	bcf	3,7	;select IRP bank0
  1199  072B  0800               	movf	0,w
  1200  072C  120A  118A  2003  120A  118A  	fcall	fptable
  1201  0731                     l100:
  1202  0731  0008               	return
  1203  0732                     __end_of_lcdWriteData:
  1204                           
  1205                           	psect	text5
  1206  05A6                     __ptext5:	
  1207 ;; *************** function _lcdConfig *****************
  1208 ;; Defined at:
  1209 ;;		line 24 in file "lcd.c"
  1210 ;; Parameters:    Size  Location     Type
  1211 ;;  obj             1    wreg     const PTR const struct .
  1212 ;;		 -> main@objLcd(4), 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;  obj             1   13[COMMON] const PTR const struct .
  1215 ;;		 -> main@objLcd(4), 
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1225 ;;      Params:         0       0       0       0       0
  1226 ;;      Locals:         1       0       0       0       0
  1227 ;;      Temps:          1       0       0       0       0
  1228 ;;      Totals:         2       0       0       0       0
  1229 ;;Total ram usage:        2 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 2
  1232 ;; This function calls:
  1233 ;;		_lcdWriteRegister
  1234 ;; This function is called by:
  1235 ;;		_lcdInit
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239  05A6                     _lcdConfig:	
  1240                           ;psect for function _lcdConfig
  1241                           
  1242                           
  1243                           ;incstack = 0
  1244                           ; Regs used in _lcdConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1245                           ;lcdConfig@obj stored from wreg
  1246  05A6  00FD               	movwf	lcdConfig@obj
  1247  05A7                     l842:
  1248                           
  1249                           ;lcd.c: 25: lcdWriteRegister(obj, (1));
  1250  05A7  01F8               	clrf	lcdWriteRegister@regAddr
  1251  05A8  0AF8               	incf	lcdWriteRegister@regAddr,f
  1252  05A9  087D               	movf	lcdConfig@obj,w
  1253  05AA  120A  118A  2732  120A  118A  	fcall	_lcdWriteRegister
  1254                           
  1255                           ;lcd.c: 26: lcdWriteRegister(obj, (2));
  1256  05AF  3002               	movlw	2
  1257  05B0  00FC               	movwf	??_lcdConfig
  1258  05B1  087C               	movf	??_lcdConfig,w
  1259  05B2  00F8               	movwf	lcdWriteRegister@regAddr
  1260  05B3  087D               	movf	lcdConfig@obj,w
  1261  05B4  120A  118A  2732  120A  118A  	fcall	_lcdWriteRegister
  1262                           
  1263                           ;lcd.c: 30: lcdWriteRegister(obj, ((0x1U << (5U)) & 0xff) | ((0x1U << (3U)) & 0xff));
  1264  05B9  3028               	movlw	40
  1265  05BA  00FC               	movwf	??_lcdConfig
  1266  05BB  087C               	movf	??_lcdConfig,w
  1267  05BC  00F8               	movwf	lcdWriteRegister@regAddr
  1268  05BD  087D               	movf	lcdConfig@obj,w
  1269  05BE  120A  118A  2732  120A  118A  	fcall	_lcdWriteRegister
  1270                           
  1271                           ;lcd.c: 32: lcdWriteRegister(obj, ((0x1U << (3U)) & 0xff) | ((0x1U << (2U)) & 0xff));
  1272  05C3  300C               	movlw	12
  1273  05C4  00FC               	movwf	??_lcdConfig
  1274  05C5  087C               	movf	??_lcdConfig,w
  1275  05C6  00F8               	movwf	lcdWriteRegister@regAddr
  1276  05C7  087D               	movf	lcdConfig@obj,w
  1277  05C8  120A  118A  2732  120A  118A  	fcall	_lcdWriteRegister
  1278                           
  1279                           ;lcd.c: 33: lcdWriteRegister(obj, ((0x1U << (2U)) & 0xff) | ((0x1U << (1U)) & 0xff));
  1280  05CD  3006               	movlw	6
  1281  05CE  00FC               	movwf	??_lcdConfig
  1282  05CF  087C               	movf	??_lcdConfig,w
  1283  05D0  00F8               	movwf	lcdWriteRegister@regAddr
  1284  05D1  087D               	movf	lcdConfig@obj,w
  1285  05D2  120A  118A  2732  120A  118A  	fcall	_lcdWriteRegister
  1286  05D7                     l91:
  1287  05D7  0008               	return
  1288  05D8                     __end_of_lcdConfig:
  1289                           
  1290                           	psect	text6
  1291  0732                     __ptext6:	
  1292 ;; *************** function _lcdWriteRegister *****************
  1293 ;; Defined at:
  1294 ;;		line 38 in file "lcd.c"
  1295 ;; Parameters:    Size  Location     Type
  1296 ;;  obj             1    wreg     const PTR const struct .
  1297 ;;		 -> main@objLcd(4), 
  1298 ;;  regAddr         1    8[COMMON] unsigned char 
  1299 ;; Auto vars:     Size  Location     Type
  1300 ;;  obj             1   11[COMMON] const PTR const struct .
  1301 ;;		 -> main@objLcd(4), 
  1302 ;; Return value:  Size  Location     Type
  1303 ;;                  1    wreg      void 
  1304 ;; Registers used:
  1305 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1306 ;; Tracked objects:
  1307 ;;		On entry : 0/0
  1308 ;;		On exit  : 0/0
  1309 ;;		Unchanged: 0/0
  1310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1311 ;;      Params:         1       0       0       0       0
  1312 ;;      Locals:         1       0       0       0       0
  1313 ;;      Temps:          2       0       0       0       0
  1314 ;;      Totals:         4       0       0       0       0
  1315 ;;Total ram usage:        4 bytes
  1316 ;; Hardware stack levels used: 1
  1317 ;; Hardware stack levels required when called: 1
  1318 ;; This function calls:
  1319 ;;		_ctrlData
  1320 ;;		_ctrlEn
  1321 ;;		_ctrlRs
  1322 ;;		_delay_ms
  1323 ;; This function is called by:
  1324 ;;		_lcdConfig
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328  0732                     _lcdWriteRegister:	
  1329                           ;psect for function _lcdWriteRegister
  1330                           
  1331                           
  1332                           ;incstack = 0
  1333                           ; Regs used in _lcdWriteRegister: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1334                           ;lcdWriteRegister@obj stored from wreg
  1335  0732  00FB               	movwf	lcdWriteRegister@obj
  1336  0733                     l838:
  1337                           
  1338                           ;lcd.c: 46: obj->ctrlRS(0);
  1339  0733  01F0               	clrf	ctrlRs@status
  1340  0734  0A7B               	incf	lcdWriteRegister@obj,w
  1341  0735  0084               	movwf	4
  1342  0736  1383               	bcf	3,7	;select IRP bank0
  1343  0737  0800               	movf	0,w
  1344  0738  120A  118A  2003  120A  118A  	fcall	fptable
  1345                           
  1346                           ;lcd.c: 47: obj->ctrlEnable(1);
  1347  073D  01F0               	clrf	ctrlEn@status
  1348  073E  0AF0               	incf	ctrlEn@status,f
  1349  073F  087B               	movf	lcdWriteRegister@obj,w
  1350  0740  0084               	movwf	4
  1351  0741  1383               	bcf	3,7	;select IRP bank0
  1352  0742  0800               	movf	0,w
  1353  0743  120A  118A  2003  120A  118A  	fcall	fptable
  1354                           
  1355                           ;lcd.c: 48: obj->ctrlData( 0x0F );
  1356  0748  300F               	movlw	15
  1357  0749  00F9               	movwf	??_lcdWriteRegister
  1358  074A  0879               	movf	??_lcdWriteRegister,w
  1359  074B  00F0               	movwf	ctrlData@Data
  1360  074C  087B               	movf	lcdWriteRegister@obj,w
  1361  074D  3E02               	addlw	2
  1362  074E  0084               	movwf	4
  1363  074F  1383               	bcf	3,7	;select IRP bank0
  1364  0750  0800               	movf	0,w
  1365  0751  120A  118A  2003  120A  118A  	fcall	fptable
  1366                           
  1367                           ;lcd.c: 49: obj->ctrlData( regAddr & 0xF0 );
  1368  0756  0878               	movf	lcdWriteRegister@regAddr,w
  1369  0757  39F0               	andlw	240
  1370  0758  00F9               	movwf	??_lcdWriteRegister
  1371  0759  0879               	movf	??_lcdWriteRegister,w
  1372  075A  00F0               	movwf	ctrlData@Data
  1373  075B  087B               	movf	lcdWriteRegister@obj,w
  1374  075C  3E02               	addlw	2
  1375  075D  0084               	movwf	4
  1376  075E  1383               	bcf	3,7	;select IRP bank0
  1377  075F  0800               	movf	0,w
  1378  0760  120A  118A  2003  120A  118A  	fcall	fptable
  1379                           
  1380                           ;lcd.c: 53: obj->ctrlWait((2));
  1381  0765  3000               	movlw	0
  1382  0766  00F3               	movwf	delay_ms@milliseconds+3
  1383  0767  3000               	movlw	0
  1384  0768  00F2               	movwf	delay_ms@milliseconds+2
  1385  0769  3000               	movlw	0
  1386  076A  00F1               	movwf	delay_ms@milliseconds+1
  1387  076B  3002               	movlw	2
  1388  076C  00F0               	movwf	delay_ms@milliseconds
  1389  076D  087B               	movf	lcdWriteRegister@obj,w
  1390  076E  3E03               	addlw	3
  1391  076F  0084               	movwf	4
  1392  0770  1383               	bcf	3,7	;select IRP bank0
  1393  0771  0800               	movf	0,w
  1394  0772  120A  118A  2003  120A  118A  	fcall	fptable
  1395                           
  1396                           ;lcd.c: 54: obj->ctrlEnable(0);
  1397  0777  01F0               	clrf	ctrlEn@status
  1398  0778  087B               	movf	lcdWriteRegister@obj,w
  1399  0779  0084               	movwf	4
  1400  077A  1383               	bcf	3,7	;select IRP bank0
  1401  077B  0800               	movf	0,w
  1402  077C  120A  118A  2003  120A  118A  	fcall	fptable
  1403                           
  1404                           ;lcd.c: 55: obj->ctrlWait((2));
  1405  0781  3000               	movlw	0
  1406  0782  00F3               	movwf	delay_ms@milliseconds+3
  1407  0783  3000               	movlw	0
  1408  0784  00F2               	movwf	delay_ms@milliseconds+2
  1409  0785  3000               	movlw	0
  1410  0786  00F1               	movwf	delay_ms@milliseconds+1
  1411  0787  3002               	movlw	2
  1412  0788  00F0               	movwf	delay_ms@milliseconds
  1413  0789  087B               	movf	lcdWriteRegister@obj,w
  1414  078A  3E03               	addlw	3
  1415  078B  0084               	movwf	4
  1416  078C  1383               	bcf	3,7	;select IRP bank0
  1417  078D  0800               	movf	0,w
  1418  078E  120A  118A  2003  120A  118A  	fcall	fptable
  1419                           
  1420                           ;lcd.c: 56: obj->ctrlEnable(1);
  1421  0793  01F0               	clrf	ctrlEn@status
  1422  0794  0AF0               	incf	ctrlEn@status,f
  1423  0795  087B               	movf	lcdWriteRegister@obj,w
  1424  0796  0084               	movwf	4
  1425  0797  1383               	bcf	3,7	;select IRP bank0
  1426  0798  0800               	movf	0,w
  1427  0799  120A  118A  2003  120A  118A  	fcall	fptable
  1428                           
  1429                           ;lcd.c: 57: obj->ctrlData( 0x0F );
  1430  079E  300F               	movlw	15
  1431  079F  00F9               	movwf	??_lcdWriteRegister
  1432  07A0  0879               	movf	??_lcdWriteRegister,w
  1433  07A1  00F0               	movwf	ctrlData@Data
  1434  07A2  087B               	movf	lcdWriteRegister@obj,w
  1435  07A3  3E02               	addlw	2
  1436  07A4  0084               	movwf	4
  1437  07A5  1383               	bcf	3,7	;select IRP bank0
  1438  07A6  0800               	movf	0,w
  1439  07A7  120A  118A  2003  120A  118A  	fcall	fptable
  1440                           
  1441                           ;lcd.c: 58: obj->ctrlData( (regAddr<<4) & 0xF0 );
  1442  07AC  0878               	movf	lcdWriteRegister@regAddr,w
  1443  07AD  00F9               	movwf	??_lcdWriteRegister
  1444  07AE  3003               	movlw	3
  1445  07AF                     u175:
  1446  07AF  1003               	clrc
  1447  07B0  0DF9               	rlf	??_lcdWriteRegister,f
  1448  07B1  3EFF               	addlw	-1
  1449  07B2  1D03               	skipz
  1450  07B3  2FAF               	goto	u175
  1451  07B4  1003               	clrc
  1452  07B5  0D79               	rlf	??_lcdWriteRegister,w
  1453  07B6  39F0               	andlw	240
  1454  07B7  00FA               	movwf	??_lcdWriteRegister+1
  1455  07B8  087A               	movf	??_lcdWriteRegister+1,w
  1456  07B9  00F0               	movwf	ctrlData@Data
  1457  07BA  087B               	movf	lcdWriteRegister@obj,w
  1458  07BB  3E02               	addlw	2
  1459  07BC  0084               	movwf	4
  1460  07BD  1383               	bcf	3,7	;select IRP bank0
  1461  07BE  0800               	movf	0,w
  1462  07BF  120A  118A  2003  120A  118A  	fcall	fptable
  1463                           
  1464                           ;lcd.c: 61: obj->ctrlWait((2));
  1465  07C4  3000               	movlw	0
  1466  07C5  00F3               	movwf	delay_ms@milliseconds+3
  1467  07C6  3000               	movlw	0
  1468  07C7  00F2               	movwf	delay_ms@milliseconds+2
  1469  07C8  3000               	movlw	0
  1470  07C9  00F1               	movwf	delay_ms@milliseconds+1
  1471  07CA  3002               	movlw	2
  1472  07CB  00F0               	movwf	delay_ms@milliseconds
  1473  07CC  087B               	movf	lcdWriteRegister@obj,w
  1474  07CD  3E03               	addlw	3
  1475  07CE  0084               	movwf	4
  1476  07CF  1383               	bcf	3,7	;select IRP bank0
  1477  07D0  0800               	movf	0,w
  1478  07D1  120A  118A  2003  120A  118A  	fcall	fptable
  1479                           
  1480                           ;lcd.c: 62: obj->ctrlEnable(0);
  1481  07D6  01F0               	clrf	ctrlEn@status
  1482  07D7  087B               	movf	lcdWriteRegister@obj,w
  1483  07D8  0084               	movwf	4
  1484  07D9  1383               	bcf	3,7	;select IRP bank0
  1485  07DA  0800               	movf	0,w
  1486  07DB  120A  118A  2003  120A  118A  	fcall	fptable
  1487                           
  1488                           ;lcd.c: 63: obj->ctrlWait((2));
  1489  07E0  3000               	movlw	0
  1490  07E1  00F3               	movwf	delay_ms@milliseconds+3
  1491  07E2  3000               	movlw	0
  1492  07E3  00F2               	movwf	delay_ms@milliseconds+2
  1493  07E4  3000               	movlw	0
  1494  07E5  00F1               	movwf	delay_ms@milliseconds+1
  1495  07E6  3002               	movlw	2
  1496  07E7  00F0               	movwf	delay_ms@milliseconds
  1497  07E8  087B               	movf	lcdWriteRegister@obj,w
  1498  07E9  3E03               	addlw	3
  1499  07EA  0084               	movwf	4
  1500  07EB  1383               	bcf	3,7	;select IRP bank0
  1501  07EC  0800               	movf	0,w
  1502  07ED  120A  118A  2003  120A  118A  	fcall	fptable
  1503  07F2                     l94:
  1504  07F2  0008               	return
  1505  07F3                     __end_of_lcdWriteRegister:
  1506                           
  1507                           	psect	text7
  1508  054B                     __ptext7:	
  1509 ;; *************** function _delay_ms *****************
  1510 ;; Defined at:
  1511 ;;		line 74 in file "newmain.c"
  1512 ;; Parameters:    Size  Location     Type
  1513 ;;  milliseconds    4    0[COMMON] unsigned long 
  1514 ;; Auto vars:     Size  Location     Type
  1515 ;;		None
  1516 ;; Return value:  Size  Location     Type
  1517 ;;                  1    wreg      void 
  1518 ;; Registers used:
  1519 ;;		wreg
  1520 ;; Tracked objects:
  1521 ;;		On entry : 0/0
  1522 ;;		On exit  : 0/0
  1523 ;;		Unchanged: 0/0
  1524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1525 ;;      Params:         4       0       0       0       0
  1526 ;;      Locals:         0       0       0       0       0
  1527 ;;      Temps:          4       0       0       0       0
  1528 ;;      Totals:         8       0       0       0       0
  1529 ;;Total ram usage:        8 bytes
  1530 ;; Hardware stack levels used: 1
  1531 ;; This function calls:
  1532 ;;		Nothing
  1533 ;; This function is called by:
  1534 ;;		_main
  1535 ;;		_lcdWriteRegister
  1536 ;;		_lcdWriteData
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540  054B                     _delay_ms:	
  1541                           ;psect for function _delay_ms
  1542                           
  1543  054B                     l834:	
  1544                           ;incstack = 0
  1545                           ; Regs used in _delay_ms: [wreg]
  1546                           
  1547                           
  1548                           ;newmain.c: 75: while(milliseconds > 0)
  1549  054B  2D6F               	goto	l58
  1550  054C                     l836:
  1551                           
  1552                           ;newmain.c: 76: {;newmain.c: 77: _delay((unsigned long)((1)*(4000000/4000.0)));
  1553  054C  30C7               	movlw	199
  1554  054D  00F4               	movwf	??_delay_ms
  1555  054E                     u307:
  1556  054E  2D4F               	nop2
  1557  054F  0BF4               	decfsz	??_delay_ms,f
  1558  0550  2D4E               	goto	u307
  1559  0551  2D52               	nop2
  1560  0552  2D53               	nop2
  1561                           
  1562                           ;newmain.c: 78: milliseconds--;
  1563  0553  3001               	movlw	1
  1564  0554  00F4               	movwf	??_delay_ms
  1565  0555  3000               	movlw	0
  1566  0556  00F5               	movwf	??_delay_ms+1
  1567  0557  3000               	movlw	0
  1568  0558  00F6               	movwf	??_delay_ms+2
  1569  0559  3000               	movlw	0
  1570  055A  00F7               	movwf	??_delay_ms+3
  1571  055B  0874               	movf	??_delay_ms,w
  1572  055C  02F0               	subwf	delay_ms@milliseconds,f
  1573  055D  0875               	movf	??_delay_ms+1,w
  1574  055E  1C03               	skipc
  1575  055F  0F75               	incfsz	??_delay_ms+1,w
  1576  0560  2D62               	goto	u155
  1577  0561  2D63               	goto	u156
  1578  0562                     u155:
  1579  0562  02F1               	subwf	delay_ms@milliseconds+1,f
  1580  0563                     u156:
  1581  0563  0876               	movf	??_delay_ms+2,w
  1582  0564  1C03               	skipc
  1583  0565  0F76               	incfsz	??_delay_ms+2,w
  1584  0566  2D68               	goto	u157
  1585  0567  2D69               	goto	u158
  1586  0568                     u157:
  1587  0568  02F2               	subwf	delay_ms@milliseconds+2,f
  1588  0569                     u158:
  1589  0569  0877               	movf	??_delay_ms+3,w
  1590  056A  1C03               	skipc
  1591  056B  0F77               	incfsz	??_delay_ms+3,w
  1592  056C  2D6E               	goto	u159
  1593  056D  2D6F               	goto	u150
  1594  056E                     u159:
  1595  056E  02F3               	subwf	delay_ms@milliseconds+3,f
  1596  056F                     u150:
  1597  056F                     l58:
  1598  056F  0873               	movf	delay_ms@milliseconds+3,w
  1599  0570  0472               	iorwf	delay_ms@milliseconds+2,w
  1600  0571  0471               	iorwf	delay_ms@milliseconds+1,w
  1601  0572  0470               	iorwf	delay_ms@milliseconds,w
  1602  0573  1D03               	skipz
  1603  0574  2D76               	goto	u161
  1604  0575  2D77               	goto	u160
  1605  0576                     u161:
  1606  0576  2D4C               	goto	l836
  1607  0577                     u160:
  1608  0577                     l61:
  1609  0577  0008               	return
  1610  0578                     __end_of_delay_ms:
  1611                           
  1612                           	psect	text8
  1613  0520                     __ptext8:	
  1614 ;; *************** function _ctrlRs *****************
  1615 ;; Defined at:
  1616 ;;		line 67 in file "newmain.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  status          1    0[COMMON] unsigned char 
  1619 ;; Auto vars:     Size  Location     Type
  1620 ;;		None
  1621 ;; Return value:  Size  Location     Type
  1622 ;;                  1    wreg      void 
  1623 ;; Registers used:
  1624 ;;		wreg, status,0
  1625 ;; Tracked objects:
  1626 ;;		On entry : 0/0
  1627 ;;		On exit  : 0/0
  1628 ;;		Unchanged: 0/0
  1629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1630 ;;      Params:         1       0       0       0       0
  1631 ;;      Locals:         0       0       0       0       0
  1632 ;;      Temps:          0       0       0       0       0
  1633 ;;      Totals:         1       0       0       0       0
  1634 ;;Total ram usage:        1 bytes
  1635 ;; Hardware stack levels used: 1
  1636 ;; This function calls:
  1637 ;;		Nothing
  1638 ;; This function is called by:
  1639 ;;		_main
  1640 ;;		_lcdWriteRegister
  1641 ;;		_lcdSetPosition
  1642 ;;		_lcdPutsInLine1
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646  0520                     _ctrlRs:	
  1647                           ;psect for function _ctrlRs
  1648                           
  1649  0520                     l830:	
  1650                           ;incstack = 0
  1651                           ; Regs used in _ctrlRs: [wreg+status,0]
  1652                           
  1653                           
  1654                           ;newmain.c: 68: PORTDbits.RD6 = status;
  1655  0520  0C70               	rrf	ctrlRs@status,w
  1656  0521  1283               	bcf	3,5	;RP0=0, select bank0
  1657  0522  1303               	bcf	3,6	;RP1=0, select bank0
  1658  0523  1C03               	skipc
  1659  0524  1308               	bcf	8,6	;volatile
  1660  0525  1803               	skipnc
  1661  0526  1708               	bsf	8,6	;volatile
  1662  0527                     l52:
  1663  0527  0008               	return
  1664  0528                     __end_of_ctrlRs:
  1665                           
  1666                           	psect	text9
  1667  0518                     __ptext9:	
  1668 ;; *************** function _ctrlEn *****************
  1669 ;; Defined at:
  1670 ;;		line 64 in file "newmain.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  status          1    0[COMMON] unsigned char 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;		None
  1675 ;; Return value:  Size  Location     Type
  1676 ;;                  1    wreg      void 
  1677 ;; Registers used:
  1678 ;;		wreg, status,0
  1679 ;; Tracked objects:
  1680 ;;		On entry : 0/0
  1681 ;;		On exit  : 0/0
  1682 ;;		Unchanged: 0/0
  1683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1684 ;;      Params:         1       0       0       0       0
  1685 ;;      Locals:         0       0       0       0       0
  1686 ;;      Temps:          0       0       0       0       0
  1687 ;;      Totals:         1       0       0       0       0
  1688 ;;Total ram usage:        1 bytes
  1689 ;; Hardware stack levels used: 1
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;;		_lcdWriteRegister
  1695 ;;		_lcdWriteData
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699  0518                     _ctrlEn:	
  1700                           ;psect for function _ctrlEn
  1701                           
  1702  0518                     l828:	
  1703                           ;incstack = 0
  1704                           ; Regs used in _ctrlEn: [wreg+status,0]
  1705                           
  1706                           
  1707                           ;newmain.c: 65: PORTDbits.RD7 = status;
  1708  0518  0C70               	rrf	ctrlEn@status,w
  1709  0519  1283               	bcf	3,5	;RP0=0, select bank0
  1710  051A  1303               	bcf	3,6	;RP1=0, select bank0
  1711  051B  1C03               	skipc
  1712  051C  1388               	bcf	8,7	;volatile
  1713  051D  1803               	skipnc
  1714  051E  1788               	bsf	8,7	;volatile
  1715  051F                     l49:
  1716  051F  0008               	return
  1717  0520                     __end_of_ctrlEn:
  1718                           
  1719                           	psect	text10
  1720  0513                     __ptext10:	
  1721 ;; *************** function _ctrlData *****************
  1722 ;; Defined at:
  1723 ;;		line 70 in file "newmain.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;  Data            1    0[COMMON] unsigned char 
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  1    wreg      void 
  1730 ;; Registers used:
  1731 ;;		wreg
  1732 ;; Tracked objects:
  1733 ;;		On entry : 0/0
  1734 ;;		On exit  : 0/0
  1735 ;;		Unchanged: 0/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1737 ;;      Params:         1       0       0       0       0
  1738 ;;      Locals:         0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0
  1740 ;;      Totals:         1       0       0       0       0
  1741 ;;Total ram usage:        1 bytes
  1742 ;; Hardware stack levels used: 1
  1743 ;; This function calls:
  1744 ;;		Nothing
  1745 ;; This function is called by:
  1746 ;;		_main
  1747 ;;		_lcdWriteRegister
  1748 ;;		_lcdWriteData
  1749 ;; This function uses a non-reentrant model
  1750 ;;
  1751                           
  1752  0513                     _ctrlData:	
  1753                           ;psect for function _ctrlData
  1754                           
  1755  0513                     l832:	
  1756                           ;incstack = 0
  1757                           ; Regs used in _ctrlData: [wreg]
  1758                           
  1759                           
  1760                           ;newmain.c: 71: PORTC = Data;
  1761  0513  0870               	movf	ctrlData@Data,w
  1762  0514  1283               	bcf	3,5	;RP0=0, select bank0
  1763  0515  1303               	bcf	3,6	;RP1=0, select bank0
  1764  0516  0087               	movwf	7	;volatile
  1765  0517                     l55:
  1766  0517  0008               	return
  1767  0518                     __end_of_ctrlData:
  1768  0008                     
  1769                           	psect	functab
  1770  0003                     __pfunctab:
  1771  0003                     __fptable:
  1772  0003                     fptable:
  1773  0003  00FF               	movwf	(btemp+1)& (0+127)
  1774  0004  3000               	movlw	high fptable
  1775  0005  008A               	movwf	10
  1776  0006  087F               	movf	(btemp+1)& (0+127),w
  1777  0007  0782               	addwf	2,f
  1778  0008                     fpbase:
  1779  0008  2808               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  1780  0009                     fp__ctrlData:
  1781  0009  120A  118A  2D13   	ljmp	_ctrlData
  1782  000C                     fp__ctrlEn:
  1783  000C  120A  118A  2D18   	ljmp	_ctrlEn
  1784  000F                     fp__ctrlRs:
  1785  000F  120A  118A  2D20   	ljmp	_ctrlRs
  1786  0012                     fp__delay_ms:
  1787  0012  120A  118A  2D4B   	ljmp	_delay_ms
  1788  0015                     __end_of__fptable:
  1789  007E                     btemp	set	126	;btemp
  1790  007E                     wtemp0	set	126
  1791                           
  1792                           	psect	idloc
  1793                           
  1794                           ;Config register IDLOC0 @ 0x2000
  1795                           ;	unspecified, using default values
  1796  2000                     	org	8192
  1797  2000  3FFF               	dw	16383
  1798                           
  1799                           ;Config register IDLOC1 @ 0x2001
  1800                           ;	unspecified, using default values
  1801  2001                     	org	8193
  1802  2001  3FFF               	dw	16383
  1803                           
  1804                           ;Config register IDLOC2 @ 0x2002
  1805                           ;	unspecified, using default values
  1806  2002                     	org	8194
  1807  2002  3FFF               	dw	16383
  1808                           
  1809                           ;Config register IDLOC3 @ 0x2003
  1810                           ;	unspecified, using default values
  1811  2003                     	org	8195
  1812  2003  3FFF               	dw	16383
  1813                           
  1814                           	psect	config
  1815                           
  1816                           ;Config register CONFIG1 @ 0x2007
  1817                           ;	Oscillator Selection bits
  1818                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1819                           ;	Watchdog Timer Enable bit
  1820                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1821                           ;	Power-up Timer Enable bit
  1822                           ;	PWRTE = 0x1, unprogrammed default
  1823                           ;	RE3/MCLR pin function select bit
  1824                           ;	MCLRE = 0x1, unprogrammed default
  1825                           ;	Code Protection bit
  1826                           ;	CP = 0x1, unprogrammed default
  1827                           ;	Data Code Protection bit
  1828                           ;	CPD = 0x1, unprogrammed default
  1829                           ;	Brown Out Reset Selection bits
  1830                           ;	BOREN = 0x3, unprogrammed default
  1831                           ;	Internal External Switchover bit
  1832                           ;	IESO = 0x1, unprogrammed default
  1833                           ;	Fail-Safe Clock Monitor Enabled bit
  1834                           ;	FCMEN = 0x1, unprogrammed default
  1835                           ;	Low Voltage Programming Enable bit
  1836                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1837                           ;	In-Circuit Debugger Mode bit
  1838                           ;	DEBUG = 0x1, unprogrammed default
  1839  2007                     	org	8199
  1840  2007  2FF2               	dw	12274
  1841                           
  1842                           ;Config register CONFIG2 @ 0x2008
  1843                           ;	unspecified, using default values
  1844                           ;	Brown-out Reset Selection bit
  1845                           ;	BOR4V = 0x1, unprogrammed default
  1846                           ;	Flash Program Memory Self Write Enable bits
  1847                           ;	WRT = 0x3, unprogrammed default
  1848  2008                     	org	8200
  1849  2008  3FFF               	dw	16383

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     19      61
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    lcdPuts@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 0
		 -> delay_ms(), 

    lcdPuts@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
		 -> ctrlData(), 

    lcdPuts@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
		 -> ctrlRs(), 

    lcdPuts@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
		 -> ctrlEn(), 

    lcdConfig@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 0
		 -> delay_ms(), 

    lcdConfig@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
		 -> ctrlData(), 

    lcdConfig@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
		 -> ctrlRs(), 

    lcdConfig@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 0
		 -> ctrlEn(), 

    lcdPutch@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdPutch@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdPutch@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdPutch@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    sp__memcpy	PTR void  size(1) Largest target is 16
		 -> lcdPuts@line2(BANK0[16]), lcdPuts@line1(BANK0[16]), 

    lcdPutsInLine2@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdPutsInLine2@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdPutsInLine2@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdPutsInLine2@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    lcdPutsInLine1@s	PTR const unsigned char  size(2) Largest target is 16
		 -> lcdPuts@line1(BANK0[16]), STR_1(CODE[8]), 

    lcdPutsInLine1@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdPutsInLine1@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdPutsInLine1@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdPutsInLine1@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    lcdPutsInLine1@obj	const PTR const struct . size(1) Largest target is 4
		 -> main@objLcd(BANK0[4]), 

    lcdWriteData@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdWriteData@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdWriteData@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdWriteData@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    lcdWriteData@obj	const PTR const struct . size(1) Largest target is 4
		 -> main@objLcd(BANK0[4]), 

    lcdSetPosition@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdSetPosition@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdSetPosition@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdSetPosition@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    lcdSetPosition@obj	const PTR const struct . size(1) Largest target is 4
		 -> main@objLcd(BANK0[4]), 

    lcdWriteRegister@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdWriteRegister@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdWriteRegister@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdWriteRegister@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    lcdWriteRegister@obj	const PTR const struct . size(1) Largest target is 4
		 -> main@objLcd(BANK0[4]), 

    lcdConfig@obj	const PTR const struct . size(1) Largest target is 4
		 -> main@objLcd(BANK0[4]), 

    lcdInit@wait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdInit@data	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdInit@RS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdInit@obj.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    lcdInit@obj.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    lcdInit@obj.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    lcdInit@obj.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    lcdInit@E	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    lcdInit@obj	const PTR struct . size(1) Largest target is 4
		 -> main@objLcd(BANK0[4]), 

    S30$ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    objLcd.ctrlWait	PTR FTN(unsigned long ,)void  size(1) Largest target is 1
		 -> delay_ms(), 

    S30$ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    objLcd.ctrlData	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlData(), 

    S30$ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    objLcd.ctrlRS	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlRs(), 

    S30$ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 

    objLcd.ctrlEnable	PTR FTN(unsigned char ,)void  size(1) Largest target is 1
		 -> ctrlEn(), 


Critical Paths under _main in COMMON

    _lcdPutsInLine1->_lcdSetPosition
    _lcdInit->_lcdConfig
    _lcdInit->_lcdSetPosition
    _lcdSetPosition->_lcdWriteData
    _lcdWriteData->_delay_ms
    _lcdConfig->_lcdWriteRegister
    _lcdWriteRegister->_delay_ms

Critical Paths under _main in BANK0

    _main->_lcdPutsInLine1
    _lcdPutsInLine1->_lcdSetPosition
    _lcdInit->_lcdSetPosition

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0   11516
                                             11 BANK0      8     8      0
                            _lcdInit
                     _lcdPutsInLine1
 ---------------------------------------------------------------------------------
 (1) _lcdPutsInLine1                                      10     7      3    5577
                                              1 BANK0     10     7      3
                             _ctrlRs *
                     _lcdSetPosition
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              6     2      4    5860
                                              1 BANK0      6     2      4
                          _lcdConfig
                     _lcdSetPosition
 ---------------------------------------------------------------------------------
 (2) _lcdSetPosition                                       3     2      1    2711
                                             12 COMMON     2     1      1
                                              0 BANK0      1     1      0
                             _ctrlRs *
                       _lcdWriteData
 ---------------------------------------------------------------------------------
 (2) _lcdWriteData                                         4     3      1    2083
                                              8 COMMON     4     3      1
                           _ctrlData *
                             _ctrlEn *
                           _delay_ms *
 ---------------------------------------------------------------------------------
 (2) _lcdConfig                                            2     2      0    2592
                                             12 COMMON     2     2      0
                   _lcdWriteRegister
 ---------------------------------------------------------------------------------
 (3) _lcdWriteRegister                                     4     3      1    2449
                                              8 COMMON     4     3      1
                           _ctrlData *
                             _ctrlEn *
                             _ctrlRs *
                           _delay_ms *
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             8     4      4     447
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (3) _ctrlRs                                               1     0      1     235
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (3) _ctrlEn                                               1     0      1     446
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (3) _ctrlData                                             1     0      1     446
                                              0 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcdInit
     _lcdConfig
       _lcdWriteRegister
         _ctrlData *
         _ctrlEn *
         _ctrlRs *
         _delay_ms *
     _lcdSetPosition
       _ctrlRs *
       _lcdWriteData *
         _ctrlData *
         _ctrlEn *
         _delay_ms *
   _lcdPutsInLine1
     _ctrlRs *
     _lcdSetPosition *
     _lcdWriteData *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      4B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     13      3D       5       76.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      4B      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Wed Mar 16 19:22:58 2022

                       pc 0002                        l52 0527                        l61 0577  
                      l55 0517                        l49 051F                        l58 056F  
                      l91 05D7                        l94 07F2                        l88 05A5  
                      l97 054A                        fsr 0004                       l100 0731  
                     l106 067A                       l830 0520                       l832 0513  
                     l840 067C                       l834 054B                       l842 05A7  
                     l850 058F                       l828 0518                       l836 054C  
                     l844 0533                       l852 0596                       l860 0629  
                     l838 0733                       l854 059C                       l846 057B  
                     l862 0634                       l848 0588                       l864 0656  
                     l856 061A                       l880 05E2                       l866 065E  
                     l858 0624                       l882 05F8                       l884 0605  
                     l878 05D8                       u200 0668                       u210 067A  
                     u211 0679                       u150 056F                       u160 0577  
                     u161 0576                       u155 0562                       u307 054E  
                     u156 0563                       u157 0568                       u158 0569  
                     u190 0640                       u159 056E                       u175 07AF  
                     u185 06EE                       u297 060D                       fsr0 0004  
                     indf 0000            ??_lcdWriteData 0079                      STR_1 0025  
                    _cont 0048                      _main 05D8                      _temp 0040  
                    btemp 007E                      start 0000          ??_lcdPutsInLine1 004E  
                   ?_main 0070                     _PORTB 0006                     _PORTC 0007  
                   _PORTD 0008                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088           __end_of_lcdInit 05A6          _lcdWriteRegister 0732  
                   fpbase 0008                     pclath 000A                     status 0003  
                   wtemp0 007E           __initialization 07F3              __end_of_main 0617  
         lcdWriteData@obj 007B                    ??_main 0055              ctrlData@Data 0070  
            ctrlEn@status 0070          __end_of__fptable 0015          __end_of_delay_ms 0578  
    delay_ms@milliseconds 0070    lcdSetPosition@position 007C          __end_of_ctrlData 0518  
    __end_of_lcdWriteData 0732                    _ctrlEn 0518                    _ctrlRs 0520  
               ??_lcdInit 004F                    fptable 0003                    fptotal 0008  
 __end_of__initialization 07FC              ctrlRs@status 0070            __pcstackCOMMON 0070  
        lcdWriteData@data 0078                __pbssBANK0 0020                __pmaintext 05D8  
__end_of_lcdWriteRegister 07F3                   ?_ctrlEn 0070                   ?_ctrlRs 0070  
               ?_delay_ms 0070                __stringtab 0015                 ?_ctrlData 0070  
       __end_of_lcdConfig 05D8                   _decenas 0044                   _lcdInit 0578  
                 __ptext1 0617                   __ptext2 0578                   __ptext3 0530  
                 __ptext4 067B                   __ptext5 05A6                   __ptext6 0732  
                 __ptext7 054B                   __ptext8 0520                   __ptext9 0518  
              ??_delay_ms 0074                   clrloop0 0529              _lcdWriteData 067B  
    end_of_initialization 07FC                ??_ctrlData 0071                lcdInit@obj 0050  
               _PORTDbits 0008                main@objLcd 0059            __end_of_ctrlEn 0520  
          __end_of_ctrlRs 0528       start_initialization 07F3            _lcdSetPosition 0530  
       lcdPutsInLine1@obj 0054         ?_lcdWriteRegister 0078                  ??_ctrlEn 0071  
                ??_ctrlRs 0071        ??_lcdWriteRegister 0079                 ___latbits 0002  
           __pcstackBANK0 004A         __size_of__fptable 0012   lcdWriteRegister@regAddr 0078  
   lcdPutsInLine1@initPos 004D    __end_of_lcdSetPosition 054B                 __pfunctab 0003  
               _lcdConfig 05A6                 __pstrings 0015                  ?_lcdInit 004B  
          _lcdPutsInLine1 0617                 clear_ram0 0528           ?_lcdSetPosition 007C  
               lcdInit@RS 004C                ?_lcdConfig 0070                 fp__ctrlEn 000C  
               fp__ctrlRs 000F               __stringbase 0024    __end_of_lcdPutsInLine1 067B  
      __end_of__stringtab 0025                  __fptable 0003           ?_lcdPutsInLine1 004B  
                _delay_ms 054B                  _centenas 0046                  __ptext10 0513  
            lcdConfig@obj 007D                  _ctrlData 0513                  lcdInit@E 004B  
             ??_lcdConfig 007C                  _unidades 0042           lcdPutsInLine1@i 0052  
         lcdPutsInLine1@s 004B         lcdSetPosition@obj 004A                 stringcode 001F  
             lcdInit@data 004D               lcdInit@wait 004E              lcdPuts@F1496 0030  
            lcdPuts@F1498 0020                  stringdir 001F                  stringtab 0015  
           ?_lcdWriteData 0078       lcdWriteRegister@obj 007B          ??_lcdSetPosition 007D  
             fp__delay_ms 0012               fp__ctrlData 0009  
